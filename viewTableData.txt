--The SQL SELECT Statement
SELECT column1, column2, ...
FROM table_name;

SELECT * FROM table_name;

--The SQL SELECT DISTINCT Statement
--The SELECT DISTINCT statement is used to return only distinct (different) values.
SELECT DISTINCT Country FROM Customers;

-- count no of distinct statement
SELECT COUNT(DISTINCT Country) FROM Customers;

--The SQL WHERE Clause
--The WHERE clause is used to filter records. It is used to extract only those records that fulfill a specified condition.
SELECT column1, column2, ...
FROM table_name
WHERE condition;

SELECT * FROM Customers
WHERE CustomerID=1;

SELECT * FROM Products
WHERE Price BETWEEN 50 AND 60;

SELECT * FROM Customers
WHERE City LIKE 'P%';                                        (Portland, Paris)

SELECT * FROM Customers
WHERE City IN ('Paris','London');


--Operators in The WHERE Clause
=	Equal	
>	Greater than	
<	Less than	
>=	Greater than or equal	
<=	Less than or equal	
<>	Not equal. Note: In some versions of SQL this operator may be written as !=	
BETWEEN	Between a certain range	
LIKE	Search for a pattern	
IN	To specify multiple possible values for a column	

--The SQL AND, OR and NOT Operators
--The WHERE clause can be combined with AND, OR, and NOT operators.
---AND Example
SELECT column1, column2, ...
FROM table_name
WHERE condition1 AND condition2 AND condition3 ...;

SELECT * FROM Customers
WHERE Country='Germany' AND City='Berlin'

----OR Example
SELECT column1, column2, ...
FROM table_name
WHERE condition1 OR condition2 OR condition3 ...;

SELECT * FROM Customers
WHERE City='Berlin' OR City='M端nchen';                       (WHERE City in ('Berlin' ,'M端nchen');)

---NOT Example
SELECT column1, column2, ...
FROM table_name
WHERE NOT condition;

SELECT * FROM Customers
WHERE NOT Country='Germany';

---Combining AND, OR and NOT
SELECT * FROM Customers
WHERE Country='Germany' AND (City='Berlin' OR City='M端nchen');

SELECT * FROM Customers
WHERE Country='Germany' AND (City like 'a%' OR City='M端nchen');

--The SQL ORDER BY Keyword
--The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.

SELECT column1, column2, ...
FROM table_name
ORDER BY column1, column2, ... ASC|DESC;

SELECT * FROM Customers
ORDER BY Country;

SELECT * FROM Customers
ORDER BY Country DESC;

---ORDER BY Several Columns Example
---

SELECT * FROM Customers
ORDER BY Country, CustomerName; ( it orders by Country, but if some rows have the same Country, it orders them by CustomerName: )


SELECT * FROM Customers
ORDER BY Country ASC, CustomerName DESC;

--The SQL INSERT INTO Statement
1
INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);

2.If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query.
  However, make sure the order of the values is in the same order as the columns in the table.
INSERT INTO table_name
VALUES (value1, value2, value3, ...);

--SQL NULL Values
---A field with a NULL value is a field with no value.

SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NULL;

SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NOT NULL;

--The SQL UPDATE Statement
---The UPDATE statement is used to modify the existing records in a table.

UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;

UPDATE Customers
SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
WHERE CustomerID = 1;

--The SQL DELETE Statement
---The DELETE statement is used to delete existing records in a table.

DELETE FROM table_name WHERE condition;

DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';

--Top/Limit
---The SELECT TOP/LIMIT clause is used to specify the number of records to return.

SELECT * FROM Customers
WHERE Country='Germany'
LIMIT 3;

--The SQL MIN() and MAX() Functions
    The MIN() function returns the smallest value of the selected column.
    The MAX() function returns the largest value of the selected column

1. MIN() Syntax

SELECT MIN(column_name)
FROM table_name
WHERE condition;

SELECT MIN(Price) AS SmallestPrice
FROM Products;

2. MAX() Syntax
SELECT MAX(column_name)
FROM table_name
WHERE condition;

SELECT MAX(Price) AS LargestPrice
FROM Products;

3. To fetch record with min price
SELECT * from products where price = (SELECT MIN(Price) FROM Products); 


--SQL COUNT(), AVG() and SUM() Functions

1. COUNT() Syntax -     The COUNT() function returns the number of rows that matches a specified criterion.

SELECT COUNT(column_name)
FROM table_name
WHERE condition;

SELECT COUNT(ProductID)
FROM Products;

SELECT COUNT(ProductID)
FROM Products where price > 9;

2. AVG() Syntax-           The AVG() function returns the average value of a numeric column.                       

SELECT AVG(column_name)
FROM table_name
WHERE condition;

SELECT AVG(Price)
FROM Products;

3. SUM() Syntax-        The SUM() function returns the total sum of a numeric column. 

SELECT SUM(column_name)
FROM table_name
WHERE condition;

SELECT SUM(Quantity)
FROM OrderDetails

--The SQL LIKE Operator

		The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.

		There are two wildcards often used in conjunction with the LIKE operator:

		The percent sign (%) represents zero, one, or multiple characters
		The underscore sign (_) represents one, single character

		LIKE Operator														Description
		WHERE CustomerName LIKE 'a%'			Finds any values that start with "a"
		WHERE CustomerName LIKE '%a'			Finds any values that end with "a"
		WHERE CustomerName LIKE '%or%'		Finds any values that have "or" in any position
		WHERE CustomerName LIKE '_r%'			Finds any values that have "r" in the second position
		WHERE CustomerName LIKE 'a_%'		Finds any values that start with "a" and are at least 2 characters in length
		WHERE CustomerName LIKE 'a__%'		Finds any values that start with "a" and are at least 3 characters in length
		WHERE ContactName LIKE 'a%o'			Finds any values that start with "a" and ends with "o"
		
SELECT * FROM Customers
WHERE CustomerName LIKE '_a%s';		(2 char is 'a' and ends with s)

--Wildcards
	---Wildcard characters are used with the LIKE operator.
	--- The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.
		Using the [!charlist] Wildcard
		The two following SQL statements select all customers with a City NOT starting with "b", "s", or "p":
		
SELECT * FROM Customers
WHERE City LIKE '[!bsp]%';     				( WHERE City NOT LIKE '[bsp]%'; )

--The SQL IN Operator
	---The IN operator is a shorthand for multiple OR conditions.

SELECT column_name(s)
FROM table_name
WHERE column_name IN (value1, value2, ...);

SELECT column_name(s)
FROM table_name
WHERE column_name IN (SELECT STATEMENT);

SELECT * FROM Customers
WHERE Country IN ('Germany', 'France', 'UK');

SELECT * FROM Customers
WHERE Country IN (SELECT Country FROM Suppliers);

--The SQL BETWEEN Operator
	---The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.
		
SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2;

SELECT * FROM Orders
WHERE OrderDate BETWEEN '1996-07-01' AND '1996-07-31';

--SQL Aliases
		SQL aliases are used to give a table, or a column in a table, a temporary name.
		Aliases are often used to make column names more readable.
		An alias only exists for the duration of that query.
		An alias is created with the AS keyword
		
1.Alias Column Syntax

SELECT column_name AS alias_name
FROM table_name;

SELECT CustomerID AS ID, CustomerName AS Customer
FROM Customers;

  	( Note: It requires double quotation marks or square brackets if the alias name contains spaces: )
SELECT CustomerName AS Customer, ContactName AS [Contact Person]
FROM Customers														

	(creates an alias named "Address" that combine four columns (Address, PostalCode, City and Country):  )																									
SELECT CustomerName,   Concat(Address , ',  ' , PostalCode , ' , ' , City , ', ' , Country)  AS Address
FROM Customers;

or
SELECT CustomerName, Address || ', ' || PostalCode || ', ' || City || ', ' || Country AS Address
FROM Customers;


2. Alias Table Syntax

SELECT column_name(s)
FROM table_name AS alias_name;

SELECT o.OrderID, o.OrderDate, c.CustomerName
FROM Customers AS c, Orders AS o
WHERE c.CustomerName='Around the Horn' AND c.CustomerID=o.CustomerID;






		
		
		